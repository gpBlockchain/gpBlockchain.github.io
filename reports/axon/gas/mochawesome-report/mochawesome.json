{
  "stats": {
    "suites": 9,
    "tests": 47,
    "passes": 35,
    "pending": 0,
    "failures": 12,
    "start": "2022-06-29T02:11:55.562Z",
    "end": "2022-06-29T02:12:16.295Z",
    "duration": 20733,
    "testsRegistered": 61,
    "passPercent": 57.377049180327866,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 13,
    "hasSkipped": true
  },
  "results": [
    {
      "uuid": "b1cfc3bf-4984-417a-b618-d22b7796e33b",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "066ce7bc-fd79-43ac-9943-86f6aaf7debf",
          "title": "bug",
          "fullFile": "/Users/guopenglin/WebstormProjects/axon-test/test/bug/bug.list.test.js",
          "file": "/test/bug/bug.list.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1",
              "fullTitle": "bug 1",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "50476fa1-d6d3-425d-abd9-22062b103011",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "0",
              "fullTitle": "bug 0",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "ac0a0b4d-877c-4dfd-94af-8052f84242e5",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "2",
              "fullTitle": "bug 2",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const testAccountAddress = await ethers.provider.getSigner(0).getAddress()\nconsole.log(\"test address:\",testAccountAddress)\n// 查询账户nonce\nlet nonce = await ethers.provider.getTransactionCount(testAccountAddress)\n\n    // send  tx that nonce+100\nlet sendNonce = nonce +100;\ntry {\n    let tx =  await ethers.provider.getSigner(0).sendTransaction( {\n        to: \"0x0c1efcca2bcb65a532274f3ef24c044ef4ab6d73\",\n        value: \"0x1\",\n        data:'0x',\n        maxFeePerGas:\"0x1111\",\n        maxPriorityFeePerGas:\"0x1\",\n        nonce:sendNonce,\n    });\n    let response = await tx.wait(1)\n    console.log(response)\n}catch (e){\n    return\n}\nexpect(\"\").to.be.equal(\"failed\")\n\n// 再次查询nonce",
              "err": {},
              "uuid": "59b9628f-0ed9-4ac5-8de2-9949cafd1b13",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "3",
              "fullTitle": "bug 3",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "15cae5fa-ff57-461d-b0c1-8d0a75ceb3fd",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "4",
              "fullTitle": "bug 4",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "9dccdb46-b1a0-48a7-8e0b-d6d6b7f3ba38",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "5",
              "fullTitle": "bug 5",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "0e1a0a04-8704-4d41-94b8-ccc1b65d7685",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "6",
              "fullTitle": "bug 6",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "220d2892-0c27-446a-a452-623e686d76fd",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "",
              "fullTitle": "bug ",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": true,
              "context": null,
              "code": "",
              "err": {},
              "uuid": "74c1469d-105e-49ba-b51a-08c4a4252735",
              "parentUUID": null,
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [
            "74c1469d-105e-49ba-b51a-08c4a4252735"
          ],
          "skipped": [
            "50476fa1-d6d3-425d-abd9-22062b103011",
            "ac0a0b4d-877c-4dfd-94af-8052f84242e5",
            "59b9628f-0ed9-4ac5-8de2-9949cafd1b13",
            "15cae5fa-ff57-461d-b0c1-8d0a75ceb3fd",
            "9dccdb46-b1a0-48a7-8e0b-d6d6b7f3ba38",
            "0e1a0a04-8704-4d41-94b8-ccc1b65d7685",
            "220d2892-0c27-446a-a452-623e686d76fd"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 600000
        },
        {
          "uuid": "c83471b5-ed15-4b65-8ea3-0937897273b4",
          "title": "eth_estimateGas",
          "fullFile": "/Users/guopenglin/WebstormProjects/axon-test/test/rpc/eth_estimateGas.test.js",
          "file": "/test/rpc/eth_estimateGas.test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "send tx without data",
              "fullTitle": "eth_estimateGas send tx without data",
              "timedOut": false,
              "duration": 94,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "let estimateGas = await ethers.provider.send('eth_estimateGas',\n    [{\n        to: normalEoaAddress,\n    }])\nexpect(estimateGas).to.be.include('0x')",
              "err": {
                "message": "ProviderError: missing field `data` at line 1 column 103",
                "estack": "ProviderError: missing field `data` at line 1 column 103\n    at HttpProvider.request (node_modules/hardhat/src/internal/core/providers/http.ts:78:19)\n    at HDWalletProvider.request (node_modules/hardhat/src/internal/core/providers/accounts.ts:189:4)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\n    at EthersProviderWrapper.send (node_modules/@nomiclabs/hardhat-ethers/src/internal/ethers-provider-wrapper.ts:13:20)\n    at Context.<anonymous> (test/rpc/eth_estimateGas.test.js:17:27)",
                "diff": null
              },
              "uuid": "50c71446-0cf8-496e-910a-8a873b1f2938",
              "parentUUID": "c83471b5-ed15-4b65-8ea3-0937897273b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "from have balance, data is method sign",
              "fullTitle": "eth_estimateGas from have balance, data is method sign",
              "timedOut": false,
              "duration": 6,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "try {\n    let estimateGas = await ethers.provider.send('eth_estimateGas',\n        [{\n            data: '0x9cb8a26a'\n        }])\n    console.log('estimateGas:', estimateGas)\n} catch (e) {\n    return\n}\nexpect(\"\").to.be.equal('failed')",
              "err": {
                "message": "AssertionError: expected '' to equal 'failed'",
                "estack": "AssertionError: expected '' to equal 'failed'\n    at Context.<anonymous> (test/rpc/eth_estimateGas.test.js:35:26)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                "diff": "+ failed\n"
              },
              "uuid": "e9149e37-d929-4075-a3ab-38aab732f960",
              "parentUUID": "c83471b5-ed15-4b65-8ea3-0937897273b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "from is address that not send tx and not have balance, to is normalEoaAddress ",
              "fullTitle": "eth_estimateGas from is address that not send tx and not have balance, to is normalEoaAddress ",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let estimateGas = await ethers.provider.send('eth_estimateGas',\n    [{\n        from: norExistAddress,\n        to: normalEoaAddress,\n        data: '0x'\n    }])\nconsole.log('estimateGas:', estimateGas)\nexpect(estimateGas).to.be.include('0x')",
              "err": {},
              "uuid": "da44cd25-048b-4520-b590-07171b610c0c",
              "parentUUID": "c83471b5-ed15-4b65-8ea3-0937897273b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "from is address that not send tx and not have balance, to is normalEoaAddress ",
              "fullTitle": "eth_estimateGas from is address that not send tx and not have balance, to is normalEoaAddress ",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let estimateGas = await ethers.provider.send('eth_estimateGas',\n    [{\n        from: norExistAddress,\n        to: normalEoaAddress,\n        data: '0x'\n    }])\nconsole.log('estimateGas:', estimateGas)\nexpect(estimateGas).to.be.include('0x')",
              "err": {},
              "uuid": "e3de28c5-8924-4288-9b1c-6f76ddcd0afd",
              "parentUUID": "c83471b5-ed15-4b65-8ea3-0937897273b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "from is address that out of bound",
              "fullTitle": "eth_estimateGas from is address that out of bound",
              "timedOut": false,
              "duration": 3,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    let estimateGas = await ethers.provider.send('eth_estimateGas',\n        [{\n            from: outOfboundAddress,\n            to: normalEoaAddress,\n            data: '0x'\n        }])\n    console.log('estimateGas:', estimateGas)\n} catch (e) {\n    return\n}\nexpect(\"\").to.be.include(\"failed\")",
              "err": {},
              "uuid": "64bc38ba-835b-47ec-8076-3b3ce84f6a4a",
              "parentUUID": "c83471b5-ed15-4b65-8ea3-0937897273b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "from is address that length too low",
              "fullTitle": "eth_estimateGas from is address that length too low",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "try {\n    let estimateGas = await ethers.provider.send('eth_estimateGas',\n        [{\n            from: lowLengthAddress,\n            to: normalEoaAddress,\n            data: '0x'\n        }])\n    console.log('estimateGas:', estimateGas)\n} catch (e) {\n    return\n}\nexpect(\"\").to.be.include(\"failed\")",
              "err": {},
              "uuid": "a6194fe8-6289-44b8-9035-3ae1b27a4cab",
              "parentUUID": "c83471b5-ed15-4b65-8ea3-0937897273b4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "from is address that from is empty",
              "fullTitle": "eth_estimateGas from is address that from is empty",
              "timedOut": false,
              "duration": 5,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// todo close Auto-fill parameters from\nlet estimateGas = await ethers.provider.send('eth_estimateGas',\n    [{\n        // from: lowLengthAddress,\n        to: normalEoaAddress,\n        data: '0x'\n    }])\nconsole.log('estimateGas:', estimateGas)",
              "err": {},
              "uuid": "f2ea0016-ead0-4e55-a14f-bf537b77f8ec",
              "parentUUID": "c83471b5-ed15-4b65-8ea3-0937897273b4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [
            {
              "uuid": "651ad5b3-bda7-473b-990c-f6ca9da2a615",
              "title": "from is contractAddress ",
              "fullFile": "/Users/guopenglin/WebstormProjects/axon-test/test/rpc/eth_estimateGas.test.js",
              "file": "/test/rpc/eth_estimateGas.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"from is contractAddress \"",
                  "fullTitle": "eth_estimateGas from is contractAddress  \"before all\" hook in \"from is contractAddress \"",
                  "timedOut": false,
                  "duration": 4121,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "contractAddress = await getDeployLogContractAddress();\nconsole.log('contractAddress:', contractAddress)",
                  "err": {},
                  "uuid": "3aebcfcb-6bb5-456b-a5b2-42ac1721e753",
                  "parentUUID": "651ad5b3-bda7-473b-990c-f6ca9da2a615",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "to is normalEoaAddress ",
                  "fullTitle": "eth_estimateGas from is contractAddress  to is normalEoaAddress ",
                  "timedOut": false,
                  "duration": 7,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let estimateGas = await ethers.provider.send('eth_estimateGas',\n    [{\n        from: contractAddress,\n        to: normalEoaAddress,\n        data: '0x'\n    }])\nconsole.log('estimateGas:', estimateGas)\nexpect(estimateGas).to.be.include('0x')",
                  "err": {},
                  "uuid": "13d839e5-7896-4e29-9bcf-0e32e17ee9cd",
                  "parentUUID": "651ad5b3-bda7-473b-990c-f6ca9da2a615",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "13d839e5-7896-4e29-9bcf-0e32e17ee9cd"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 7,
              "root": false,
              "rootEmpty": false,
              "_timeout": 600000
            },
            {
              "uuid": "8e8fe489-3549-4ca5-9872-9b4858b7ccd4",
              "title": "from have ckb",
              "fullFile": "/Users/guopenglin/WebstormProjects/axon-test/test/rpc/eth_estimateGas.test.js",
              "file": "/test/rpc/eth_estimateGas.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"from have ckb\"",
                  "fullTitle": "eth_estimateGas from have ckb \"before all\" hook in \"from have ckb\"",
                  "timedOut": false,
                  "duration": 8176,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "haveCkbAddress = await ethers.provider.getSigner(0).getAddress()\nno0xAndUpperCaseAddress = normalEoaAddress.substring(2).toUpperCase()\ncontractWithFallbackMethodAddress = await getFallbackAndReceiveContractAddress()\ncontractWithoutFallbackMethodAddress = await getNoFallbackAndReceiveContractAddress()",
                  "err": {},
                  "uuid": "5133aa34-8a4c-4b43-827a-6af84af94372",
                  "parentUUID": "8e8fe489-3549-4ca5-9872-9b4858b7ccd4",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "to is address that on 0x and upperCase",
                  "fullTitle": "eth_estimateGas from have ckb to is address that on 0x and upperCase",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//todo check axon result sync with eth ?\n//axon :succ\n// hardhat: Errors encountered in param 0: Invalid value \"0C1EFCCA2BCB65A532274F3EF24C044EF4AB6D73\" supplied to : RpcCallRequest/to: ADDRESS | undefined\nlet estimateGas = await ethers.provider.send('eth_estimateGas',\n    [{\n        from: haveCkbAddress,\n        to: no0xAndUpperCaseAddress,\n        data: '0x'\n    }])\nexpect(estimateGas).to.be.include('0x')",
                  "err": {},
                  "uuid": "78172753-b287-48e9-a816-25f406ad603c",
                  "parentUUID": "8e8fe489-3549-4ca5-9872-9b4858b7ccd4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "to is address that out of bound ",
                  "fullTitle": "eth_estimateGas from have ckb to is address that out of bound ",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "try {\n    let estimateGas = await ethers.provider.send('eth_estimateGas',\n        [{\n            from: haveCkbAddress,\n            to: outOfboundAddress,\n            data: '0x'\n        }])\n} catch (e) {\n    return\n}\nexpect(\"\").to.be.include(\"failed\")",
                  "err": {},
                  "uuid": "d4c5d003-43fb-4973-b31d-4cfac5474086",
                  "parentUUID": "8e8fe489-3549-4ca5-9872-9b4858b7ccd4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "to is empty ",
                  "fullTitle": "eth_estimateGas from have ckb to is empty ",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let estimateGas = await ethers.provider.send('eth_estimateGas',\n    [{\n        from: haveCkbAddress,\n        data: '0x'\n    }])\nexpect(estimateGas).to.be.include('0x')",
                  "err": {},
                  "uuid": "8e21c68d-fcfa-4430-b2f6-09b15d7069ac",
                  "parentUUID": "8e8fe489-3549-4ca5-9872-9b4858b7ccd4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "to is null ",
                  "fullTitle": "eth_estimateGas from have ckb to is null ",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let estimateGas = await ethers.provider.send('eth_estimateGas',\n    [{\n        from: haveCkbAddress,\n        to: null,\n        data: '0x'\n    }])\nexpect(estimateGas).to.be.include('0x')",
                  "err": {},
                  "uuid": "d7b5823d-fe5d-48f6-bc44-455b8bf33463",
                  "parentUUID": "8e8fe489-3549-4ca5-9872-9b4858b7ccd4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "to is contract that  have fallback method",
                  "fullTitle": "eth_estimateGas from have ckb to is contract that  have fallback method",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let estimateGas = await ethers.provider.send('eth_estimateGas',\n    [{\n        from: haveCkbAddress,\n        to: contractWithFallbackMethodAddress,\n        data: '0x'\n    }])",
                  "err": {},
                  "uuid": "6cd42b43-c153-41a2-b427-3c337c832cee",
                  "parentUUID": "8e8fe489-3549-4ca5-9872-9b4858b7ccd4",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "to is contract that not have fallback method",
                  "fullTitle": "eth_estimateGas from have ckb to is contract that not have fallback method",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "try {\n    let estimateGas = await ethers.provider.send('eth_estimateGas',\n        [{\n            from: haveCkbAddress,\n            to: contractWithoutFallbackMethodAddress,\n            data: '0x'\n        }])\n} catch (e) {\n    return\n}\nexpect(\"\").to.be.include(\"failed\")",
                  "err": {
                    "message": "AssertionError: expected '' to include 'failed'",
                    "estack": "AssertionError: expected '' to include 'failed'\n    at Context.<anonymous> (test/rpc/eth_estimateGas.test.js:204:30)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                    "diff": null
                  },
                  "uuid": "e650f440-0378-4f43-ae0a-1a75cbcc2534",
                  "parentUUID": "8e8fe489-3549-4ca5-9872-9b4858b7ccd4",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "78172753-b287-48e9-a816-25f406ad603c",
                "d4c5d003-43fb-4973-b31d-4cfac5474086",
                "8e21c68d-fcfa-4430-b2f6-09b15d7069ac",
                "d7b5823d-fe5d-48f6-bc44-455b8bf33463",
                "6cd42b43-c153-41a2-b427-3c337c832cee"
              ],
              "failures": [
                "e650f440-0378-4f43-ae0a-1a75cbcc2534"
              ],
              "pending": [],
              "skipped": [],
              "duration": 22,
              "root": false,
              "rootEmpty": false,
              "_timeout": 600000
            },
            {
              "uuid": "a12a98c0-48be-4be6-b58c-b62a1e93aa41",
              "title": "from have ckb(gas)",
              "fullFile": "/Users/guopenglin/WebstormProjects/axon-test/test/rpc/eth_estimateGas.test.js",
              "file": "/test/rpc/eth_estimateGas.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"from have ckb(gas)\"",
                  "fullTitle": "eth_estimateGas from have ckb(gas) \"before all\" hook in \"from have ckb(gas)\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "haveCkbAddress = await ethers.provider.getSigner(0).getAddress()",
                  "err": {},
                  "uuid": "26aed66f-3ade-4938-9da6-bc2d02eb1f91",
                  "parentUUID": "a12a98c0-48be-4be6-b58c-b62a1e93aa41",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "gas without 0x",
                  "fullTitle": "eth_estimateGas from have ckb(gas) gas without 0x",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//todo axon :succ\n            // hardhat failed\n            let estimateGas = await ethers.provider.send('eth_estimateGas',\n                [{\n                    from: haveCkbAddress,\n                    to: normalEoaAddress,\n                    data: '0x',\n                    gas: '100000'\n                }])",
                  "err": {},
                  "uuid": "da1c707e-f5e0-4028-810a-ed6393103091",
                  "parentUUID": "a12a98c0-48be-4be6-b58c-b62a1e93aa41",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "gas with 0x",
                  "fullTitle": "eth_estimateGas from have ckb(gas) gas with 0x",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let estimateGas = await ethers.provider.send('eth_estimateGas',\n                [{\n                    from: haveCkbAddress,\n                    to: normalEoaAddress,\n                    data: '0x',\n                    gas: '0x100000'\n                }])",
                  "err": {},
                  "uuid": "518a723e-bbc6-44cf-bce1-c032515e4f50",
                  "parentUUID": "a12a98c0-48be-4be6-b58c-b62a1e93aa41",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "gas is 0",
                  "fullTitle": "eth_estimateGas from have ckb(gas) gas is 0",
                  "timedOut": false,
                  "duration": 3,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "try {\n                let estimateGas = await ethers.provider.send('eth_estimateGas',\n                    [{\n                        from: haveCkbAddress,\n                        to: normalEoaAddress,\n                        data: '0x',\n                        gas: '0x0'\n                    }])\n            } catch (e) {\n                return\n            }\n            expect('').to.be.include('failed')",
                  "err": {
                    "message": "AssertionError: expected '' to include 'failed'",
                    "estack": "AssertionError: expected '' to include 'failed'\n    at Context.<anonymous> (test/rpc/eth_estimateGas.test.js:249:30)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                    "diff": null
                  },
                  "uuid": "80ce0ed0-f14f-4ac1-ab11-e9ae87ad871d",
                  "parentUUID": "a12a98c0-48be-4be6-b58c-b62a1e93aa41",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "gas is eq estimateGas",
                  "fullTitle": "eth_estimateGas from have ckb(gas) gas is eq estimateGas",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let estimateGas = await ethers.provider.send('eth_estimateGas',\n    [{\n        from: haveCkbAddress,\n        to: normalEoaAddress,\n        data: '0x',\n        gas: '0xfffff'\n    }])\nlet estimateGas2 = await ethers.provider.send('eth_estimateGas',\n    [{\n        from: haveCkbAddress,\n        to: normalEoaAddress,\n        data: '0x',\n        gas: estimateGas\n    }])\nexpect(estimateGas).to.be.include(estimateGas2)",
                  "err": {},
                  "uuid": "f2c7a499-9d08-47d8-a9ea-c50812ed2b63",
                  "parentUUID": "a12a98c0-48be-4be6-b58c-b62a1e93aa41",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "gas  eq estimateGas-1",
                  "fullTitle": "eth_estimateGas from have ckb(gas) gas  eq estimateGas-1",
                  "timedOut": false,
                  "duration": 4,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let estimateGas = await ethers.provider.send('eth_estimateGas',\n                [{\n                    from: haveCkbAddress,\n                    to: normalEoaAddress,\n                    data: '0x',\n                }])\n            // test gas = estimateGas -1\n            let testGas = estimateGas - 1\n            let estimateGas2 = await ethers.provider.send('eth_estimateGas',\n                [{\n                    from: haveCkbAddress,\n                    to: normalEoaAddress,\n                    data: '0x',\n                    gas: \"0x\" + testGas.toString(16)\n                }])\n            expect(estimateGas2).to.be.include(estimateGas)",
                  "err": {},
                  "uuid": "035e8b22-918e-468f-a3dc-796002c5f8bc",
                  "parentUUID": "a12a98c0-48be-4be6-b58c-b62a1e93aa41",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "gas  eq estimateGas-2",
                  "fullTitle": "eth_estimateGas from have ckb(gas) gas  eq estimateGas-2",
                  "timedOut": false,
                  "duration": 4,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "try {\n                let estimateGas = await ethers.provider.send('eth_estimateGas',\n                    [{\n                        from: haveCkbAddress,\n                        to: normalEoaAddress,\n                        data: '0x',\n                    }])\n                let estimateGas2 = await ethers.provider.send('eth_estimateGas',\n                    [{\n                        from: haveCkbAddress,\n                        to: normalEoaAddress,\n                        data: '0x',\n                        gas: \"0x\" + (estimateGas - 2).toString(16)\n                    }])\n            } catch (e) {\n                return\n            }\n            expect('').to.be.include('failed')",
                  "err": {
                    "message": "AssertionError: expected '' to include 'failed'",
                    "estack": "AssertionError: expected '' to include 'failed'\n    at Context.<anonymous> (test/rpc/eth_estimateGas.test.js:312:30)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                    "diff": null
                  },
                  "uuid": "70b1c378-3195-4771-8836-fa4d9edf698c",
                  "parentUUID": "a12a98c0-48be-4be6-b58c-b62a1e93aa41",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "gas is null ",
                  "fullTitle": "eth_estimateGas from have ckb(gas) gas is null ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let estimateGas = await ethers.provider.send('eth_estimateGas',\n                [{\n                    from: haveCkbAddress,\n                    to: normalEoaAddress,\n                    data: '0x',\n                    gas: null\n                }])",
                  "err": {},
                  "uuid": "8b55d4c5-7183-4943-b54c-00936f15a1f0",
                  "parentUUID": "a12a98c0-48be-4be6-b58c-b62a1e93aa41",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "gas is empty  ",
                  "fullTitle": "eth_estimateGas from have ckb(gas) gas is empty  ",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let estimateGas = await ethers.provider.send('eth_estimateGas',\n                [{\n                    from: haveCkbAddress,\n                    to: normalEoaAddress,\n                    data: '0x',\n                }])",
                  "err": {},
                  "uuid": "bea65246-154c-45e0-89ca-52fad668efd8",
                  "parentUUID": "a12a98c0-48be-4be6-b58c-b62a1e93aa41",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "gas is very big   ",
                  "fullTitle": "eth_estimateGas from have ckb(gas) gas is very big   ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "try {\n    let estimateGas = await ethers.provider.send('eth_estimateGas',\n        [{\n            from: haveCkbAddress,\n            to: normalEoaAddress,\n            data: '0x',\n            gas: '0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff',\n        }])\n} catch (e) {\n    return\n}\nexpect('').to.be.include('failed')",
                  "err": {},
                  "uuid": "1bd2b09f-4946-4379-9c63-704b60cb0df4",
                  "parentUUID": "a12a98c0-48be-4be6-b58c-b62a1e93aa41",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "da1c707e-f5e0-4028-810a-ed6393103091",
                "518a723e-bbc6-44cf-bce1-c032515e4f50",
                "f2c7a499-9d08-47d8-a9ea-c50812ed2b63",
                "035e8b22-918e-468f-a3dc-796002c5f8bc",
                "8b55d4c5-7183-4943-b54c-00936f15a1f0",
                "bea65246-154c-45e0-89ca-52fad668efd8",
                "1bd2b09f-4946-4379-9c63-704b60cb0df4"
              ],
              "failures": [
                "80ce0ed0-f14f-4ac1-ab11-e9ae87ad871d",
                "70b1c378-3195-4771-8836-fa4d9edf698c"
              ],
              "pending": [],
              "skipped": [],
              "duration": 27,
              "root": false,
              "rootEmpty": false,
              "_timeout": 600000
            },
            {
              "uuid": "46ffe618-5d77-41af-b821-1890996439ac",
              "title": "from have ckb(value)",
              "fullFile": "/Users/guopenglin/WebstormProjects/axon-test/test/rpc/eth_estimateGas.test.js",
              "file": "/test/rpc/eth_estimateGas.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"from have ckb(value)\"",
                  "fullTitle": "eth_estimateGas from have ckb(value) \"before all\" hook in \"from have ckb(value)\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "haveCkbAddress = await ethers.provider.getSigner(0).getAddress()",
                  "err": {},
                  "uuid": "1bcfdb82-3e45-4b3b-aa5d-527f18ffd6bb",
                  "parentUUID": "46ffe618-5d77-41af-b821-1890996439ac",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "value without 0x",
                  "fullTitle": "eth_estimateGas from have ckb(value) value without 0x",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//todo\n// check axon succ\n// hardhat failed\nlet estimateGas = await ethers.provider.send('eth_estimateGas',\n    [{\n        from: haveCkbAddress,\n        to: normalEoaAddress,\n        data: '0x',\n        value: '1'\n    }])\nexpect(estimateGas).to.be.include('0x')",
                  "err": {},
                  "uuid": "481fb292-b7e8-4c4f-88ae-9215fa536657",
                  "parentUUID": "46ffe618-5d77-41af-b821-1890996439ac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "value with 0x",
                  "fullTitle": "eth_estimateGas from have ckb(value) value with 0x",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let estimateGas = await ethers.provider.send('eth_estimateGas',\n    [{\n        from: haveCkbAddress,\n        to: normalEoaAddress,\n        data: '0x',\n        value: '0x1'\n    }])\nexpect(estimateGas).to.be.include('0x')",
                  "err": {},
                  "uuid": "9467d85a-7e46-4771-ada5-7ba2bc87ccd7",
                  "parentUUID": "46ffe618-5d77-41af-b821-1890996439ac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "value is empty",
                  "fullTitle": "eth_estimateGas from have ckb(value) value is empty",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let estimateGas = await ethers.provider.send('eth_estimateGas',\n    [{\n        from: haveCkbAddress,\n        to: normalEoaAddress,\n        data: '0x',\n    }])\nexpect(estimateGas).to.be.include('0x')",
                  "err": {},
                  "uuid": "4572ee35-1949-49df-b4c7-62148ecff2bb",
                  "parentUUID": "46ffe618-5d77-41af-b821-1890996439ac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "value =  from balance ",
                  "fullTitle": "eth_estimateGas from have ckb(value) value =  from balance ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let fromBalance = await ethers.provider.getBalance(haveCkbAddress)\nlet estimateGas = await ethers.provider.send('eth_estimateGas',\n    [{\n        from: haveCkbAddress,\n        to: normalEoaAddress,\n        data: '0x',\n        value: fromBalance.toHexString().replace('0x0', '0x'),\n    }])\nexpect(estimateGas).to.be.include('0x')",
                  "err": {},
                  "uuid": "1d5fe1c1-9777-45b9-8a53-86e2114acb95",
                  "parentUUID": "46ffe618-5d77-41af-b821-1890996439ac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "value >  from balance ",
                  "fullTitle": "eth_estimateGas from have ckb(value) value >  from balance ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//todo  value\nlet fromBalance = await ethers.provider.getBalance(haveCkbAddress)\nlet estimateGas = await ethers.provider.send('eth_estimateGas',\n    [{\n        from: haveCkbAddress,\n        to: normalEoaAddress,\n        data: '0x',\n        value: fromBalance.mul(BigNumber.from('1000000')).toHexString().replace('0x0', '0x'),\n    }])\nexpect(estimateGas).to.be.include('0x')",
                  "err": {},
                  "uuid": "d4590ff5-6b58-4f14-8fdc-06ddd3979533",
                  "parentUUID": "46ffe618-5d77-41af-b821-1890996439ac",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "value is null ",
                  "fullTitle": "eth_estimateGas from have ckb(value) value is null ",
                  "timedOut": false,
                  "duration": 6,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//todo  value\nlet fromBalance = await ethers.provider.getBalance(haveCkbAddress)\nlet estimateGas = await ethers.provider.send('eth_estimateGas',\n    [{\n        from: haveCkbAddress,\n        to: normalEoaAddress,\n        data: '0x',\n        value: null,\n    }])\nexpect(estimateGas).to.be.include('0x')",
                  "err": {},
                  "uuid": "52f6488b-4378-47c8-b646-ce9087803c7b",
                  "parentUUID": "46ffe618-5d77-41af-b821-1890996439ac",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "481fb292-b7e8-4c4f-88ae-9215fa536657",
                "9467d85a-7e46-4771-ada5-7ba2bc87ccd7",
                "4572ee35-1949-49df-b4c7-62148ecff2bb",
                "1d5fe1c1-9777-45b9-8a53-86e2114acb95",
                "d4590ff5-6b58-4f14-8fdc-06ddd3979533",
                "52f6488b-4378-47c8-b646-ce9087803c7b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 23,
              "root": false,
              "rootEmpty": false,
              "_timeout": 600000
            },
            {
              "uuid": "7480ecd3-f13e-4995-9470-cb6f8a20bea9",
              "title": "from have ckb(data)",
              "fullFile": "/Users/guopenglin/WebstormProjects/axon-test/test/rpc/eth_estimateGas.test.js",
              "file": "/test/rpc/eth_estimateGas.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"from have ckb(data)\"",
                  "fullTitle": "eth_estimateGas from have ckb(data) \"before all\" hook in \"from have ckb(data)\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "haveCkbAddress = await ethers.provider.getSigner(0).getAddress()",
                  "err": {},
                  "uuid": "59d332ee-8e05-45dc-9752-585203e1d4b6",
                  "parentUUID": "7480ecd3-f13e-4995-9470-cb6f8a20bea9",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "data is 0x",
                  "fullTitle": "eth_estimateGas from have ckb(data) data is 0x",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let estimateGas = await ethers.provider.send('eth_estimateGas',\n    [{\n        from: haveCkbAddress,\n        to: normalEoaAddress,\n        data: '0x',\n    }])\nexpect(estimateGas).to.be.include('0x')",
                  "err": {},
                  "uuid": "138a078c-7c09-447a-bc25-d77cbeed0445",
                  "parentUUID": "7480ecd3-f13e-4995-9470-cb6f8a20bea9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "data is ''",
                  "fullTitle": "eth_estimateGas from have ckb(data) data is ''",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//todo check axon succ\n// hardhat failed\n    let estimateGas = await ethers.provider.send('eth_estimateGas',\n        [{\n            from: haveCkbAddress,\n            to: normalEoaAddress,\n            data: '',\n        }])\n    expect(estimateGas).to.be.include('0x')",
                  "err": {},
                  "uuid": "c5ef0a8c-d6b6-43b9-be53-5d1d13011ed4",
                  "parentUUID": "7480ecd3-f13e-4995-9470-cb6f8a20bea9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "data is 0x0fff",
                  "fullTitle": "eth_estimateGas from have ckb(data) data is 0x0fff",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let estimateGas = await ethers.provider.send('eth_estimateGas',\n    [{\n        from: haveCkbAddress,\n        to: normalEoaAddress,\n        data: '0x0fff',\n    }])\nexpect(estimateGas).to.be.include('0x')",
                  "err": {},
                  "uuid": "4ea28211-a152-49d5-b0ad-8a3cb019e0c2",
                  "parentUUID": "7480ecd3-f13e-4995-9470-cb6f8a20bea9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "data is 0xfff",
                  "fullTitle": "eth_estimateGas from have ckb(data) data is 0xfff",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "try {\n    let estimateGas = await ethers.provider.send('eth_estimateGas',\n        [{\n            from: haveCkbAddress,\n            to: normalEoaAddress,\n            data: '0xfff',\n        }])\n    expect(estimateGas).to.be.include('0x')\n}catch (e){\n    return\n}\nexpect('').to.be.include('failed')",
                  "err": {},
                  "uuid": "c29540bb-ee0b-4be1-ba3d-316e8745ed8a",
                  "parentUUID": "7480ecd3-f13e-4995-9470-cb6f8a20bea9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "data is null",
                  "fullTitle": "eth_estimateGas from have ckb(data) data is null",
                  "timedOut": false,
                  "duration": 2,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let estimateGas = await ethers.provider.send('eth_estimateGas',\n    [{\n        from: haveCkbAddress,\n        to: normalEoaAddress,\n        data: null,\n    }])\nexpect(estimateGas).to.be.include('0x')",
                  "err": {
                    "message": "ProviderError: invalid type: null, expected Expect a hex string at line 1 column 114",
                    "estack": "ProviderError: invalid type: null, expected Expect a hex string at line 1 column 114\n    at HttpProvider.request (node_modules/hardhat/src/internal/core/providers/http.ts:78:19)\n    at HDWalletProvider.request (node_modules/hardhat/src/internal/core/providers/accounts.ts:189:4)\n    at EthersProviderWrapper.send (node_modules/@nomiclabs/hardhat-ethers/src/internal/ethers-provider-wrapper.ts:13:20)\n    at Context.<anonymous> (test/rpc/eth_estimateGas.test.js:492:31)",
                    "diff": null
                  },
                  "uuid": "86a7b9ac-9d04-4d23-9334-2f41e454b79c",
                  "parentUUID": "7480ecd3-f13e-4995-9470-cb6f8a20bea9",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "data is emtpy ",
                  "fullTitle": "eth_estimateGas from have ckb(data) data is emtpy ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "let estimateGas = await ethers.provider.send('eth_estimateGas',\n    [{\n        from: haveCkbAddress,\n        to: normalEoaAddress,\n    }])\nexpect(estimateGas).to.be.include('0x')",
                  "err": {
                    "message": "ProviderError: missing field `data` at line 1 column 103",
                    "estack": "ProviderError: missing field `data` at line 1 column 103\n    at HttpProvider.request (node_modules/hardhat/src/internal/core/providers/http.ts:78:19)\n    at HDWalletProvider.request (node_modules/hardhat/src/internal/core/providers/accounts.ts:189:4)\n    at EthersProviderWrapper.send (node_modules/@nomiclabs/hardhat-ethers/src/internal/ethers-provider-wrapper.ts:13:20)\n    at Context.<anonymous> (test/rpc/eth_estimateGas.test.js:502:31)",
                    "diff": null
                  },
                  "uuid": "d4655664-a744-41fd-a843-9125ffaa02c7",
                  "parentUUID": "7480ecd3-f13e-4995-9470-cb6f8a20bea9",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "138a078c-7c09-447a-bc25-d77cbeed0445",
                "c5ef0a8c-d6b6-43b9-be53-5d1d13011ed4",
                "4ea28211-a152-49d5-b0ad-8a3cb019e0c2",
                "c29540bb-ee0b-4be1-ba3d-316e8745ed8a"
              ],
              "failures": [
                "86a7b9ac-9d04-4d23-9334-2f41e454b79c",
                "d4655664-a744-41fd-a843-9125ffaa02c7"
              ],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 600000
            },
            {
              "uuid": "bd05f098-cf1f-40cd-b88f-2cc0549ae314",
              "title": "from have ckb(gasPrice)",
              "fullFile": "/Users/guopenglin/WebstormProjects/axon-test/test/rpc/eth_estimateGas.test.js",
              "file": "/test/rpc/eth_estimateGas.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"from have ckb(gasPrice)\"",
                  "fullTitle": "eth_estimateGas from have ckb(gasPrice) \"before all\" hook in \"from have ckb(gasPrice)\"",
                  "timedOut": false,
                  "duration": 1,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "haveCkbAddress = await ethers.provider.getSigner(0).getAddress()",
                  "err": {},
                  "uuid": "b567b7c4-63ce-43be-b9c5-30d722ef05c0",
                  "parentUUID": "bd05f098-cf1f-40cd-b88f-2cc0549ae314",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "gasPrice is 0x1 ",
                  "fullTitle": "eth_estimateGas from have ckb(gasPrice) gasPrice is 0x1 ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "//todo check\nlet estimateGas = await ethers.provider.send('eth_estimateGas',\n    [{\n        from: haveCkbAddress,\n        to: normalEoaAddress,\n        data:'0x',\n        gasPrice:'0x1'\n    }])\nexpect(estimateGas).to.be.include('0x')",
                  "err": {},
                  "uuid": "c3a3553b-9e22-4889-b867-a508e7045edf",
                  "parentUUID": "bd05f098-cf1f-40cd-b88f-2cc0549ae314",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "gasPrice without 0x",
                  "fullTitle": "eth_estimateGas from have ckb(gasPrice) gasPrice without 0x",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// todo check\n// axon succ\n// hardhat failed\nlet estimateGas = await ethers.provider.send('eth_estimateGas',\n    [{\n        from: haveCkbAddress,\n        to: normalEoaAddress,\n        data:'0x',\n        gasPrice:'11'\n    }])\nexpect(estimateGas).to.be.include('0x')",
                  "err": {},
                  "uuid": "d7d98b46-f956-4aaf-8710-93ddc7eb9ae0",
                  "parentUUID": "bd05f098-cf1f-40cd-b88f-2cc0549ae314",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "gasPrice > min gasPrice  ",
                  "fullTitle": "eth_estimateGas from have ckb(gasPrice) gasPrice > min gasPrice  ",
                  "timedOut": false,
                  "duration": 2,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "// todo check\n// axon succ\n// hardhat failed\nlet estimateGas = await ethers.provider.send('eth_estimateGas',\n    [{\n        from: haveCkbAddress,\n        to: normalEoaAddress,\n        data:'0x',\n        gasPrice:'0xffffffffff'\n    }])\nexpect(estimateGas).to.be.include('0x')",
                  "err": {},
                  "uuid": "c7173fbf-f7e5-4f66-9bc3-3df52a1b0835",
                  "parentUUID": "bd05f098-cf1f-40cd-b88f-2cc0549ae314",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "gasPrice very big  (exceed MAX_INTEGER (2^256-1)) ",
                  "fullTitle": "eth_estimateGas from have ckb(gasPrice) gasPrice very big  (exceed MAX_INTEGER (2^256-1)) ",
                  "timedOut": false,
                  "duration": 1,
                  "state": "failed",
                  "speed": null,
                  "pass": false,
                  "fail": true,
                  "pending": false,
                  "context": null,
                  "code": "// todo check\n// axon succ\n// hardhat failed\ntry {\n    let estimateGas = await ethers.provider.send('eth_estimateGas',\n        [{\n            from: haveCkbAddress,\n            to: normalEoaAddress,\n            data:'0x',\n            gasPrice:'0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n        }])\n    expect(estimateGas).to.be.include('0x')\n}catch (e){\n    return\n}\nexpect('').to.be.include('failed')",
                  "err": {
                    "message": "AssertionError: expected '' to include 'failed'",
                    "estack": "AssertionError: expected '' to include 'failed'\n    at Context.<anonymous> (test/rpc/eth_estimateGas.test.js:573:30)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                    "diff": null
                  },
                  "uuid": "726ec9b9-52c0-4ea6-89bf-04f6f90776d2",
                  "parentUUID": "bd05f098-cf1f-40cd-b88f-2cc0549ae314",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "gasPrice very very  big-1 ",
                  "fullTitle": "eth_estimateGas from have ckb(gasPrice) gasPrice very very  big-1 ",
                  "timedOut": false,
                  "duration": 3,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "try {\n                let estimateGas = await ethers.provider.send('eth_estimateGas',\n                    [{\n                        from: haveCkbAddress,\n                        to: normalEoaAddress,\n                        data: '0x',\n                        gasPrice: '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff'\n                    }])\n            }catch (e){\n                return\n            }\n            expect('').to.be.include('failed')",
                  "err": {},
                  "uuid": "193b4a75-8c1c-4f73-b10b-6fed12671337",
                  "parentUUID": "bd05f098-cf1f-40cd-b88f-2cc0549ae314",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [
                {
                  "uuid": "71da444c-fa88-4d1f-8403-6c40d93f5c12",
                  "title": "from have ckb(gasPrice),to is contract,value >0",
                  "fullFile": "/Users/guopenglin/WebstormProjects/axon-test/test/rpc/eth_estimateGas.test.js",
                  "file": "/test/rpc/eth_estimateGas.test.js",
                  "beforeHooks": [
                    {
                      "title": "\"before all\" hook in \"from have ckb(gasPrice),to is contract,value >0\"",
                      "fullTitle": "eth_estimateGas from have ckb(gasPrice) from have ckb(gasPrice),to is contract,value >0 \"before all\" hook in \"from have ckb(gasPrice),to is contract,value >0\"",
                      "timedOut": false,
                      "duration": 8163,
                      "state": null,
                      "speed": null,
                      "pass": false,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "haveCkbAddress = await ethers.provider.getSigner(0).getAddress()\ncontractWithFallbackMethodAddress = await getFallbackAndReceiveContractAddress()\ncontractWithoutFallbackMethodAddress = await getNoFallbackAndReceiveContractAddress()",
                      "err": {},
                      "uuid": "69a61bf1-28b4-484a-aecc-3ed4818cad55",
                      "parentUUID": "71da444c-fa88-4d1f-8403-6c40d93f5c12",
                      "isHook": true,
                      "skipped": false
                    }
                  ],
                  "afterHooks": [],
                  "tests": [
                    {
                      "title": "data is  method that contains payable tag ",
                      "fullTitle": "eth_estimateGas from have ckb(gasPrice) from have ckb(gasPrice),to is contract,value >0 data is  method that contains payable tag ",
                      "timedOut": false,
                      "duration": 7,
                      "state": "passed",
                      "speed": "fast",
                      "pass": true,
                      "fail": false,
                      "pending": false,
                      "context": null,
                      "code": "let estimateGas = await ethers.provider.send('eth_estimateGas',\n    [{\n        from: haveCkbAddress,\n        to: contractWithFallbackMethodAddress,\n        data: payableMethodSig,\n        value:'0x12'\n    }])\nexpect(estimateGas).to.be.include('0x')",
                      "err": {},
                      "uuid": "a2363e8a-59d5-4fc6-abab-3830f787f99c",
                      "parentUUID": "71da444c-fa88-4d1f-8403-6c40d93f5c12",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "data is method that not contains payable tag ",
                      "fullTitle": "eth_estimateGas from have ckb(gasPrice) from have ckb(gasPrice),to is contract,value >0 data is method that not contains payable tag ",
                      "timedOut": false,
                      "duration": 5,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "try {\n    let estimateGas = await ethers.provider.send('eth_estimateGas',\n        [{\n            from: haveCkbAddress,\n            to: contractWithFallbackMethodAddress,\n            data: notContainsPayableMethodSig,\n            value:'0x12'\n        }])\n}catch (e){\n    return\n}\nexpect('').to.be.include('failed')",
                      "err": {
                        "message": "AssertionError: expected '' to include 'failed'",
                        "estack": "AssertionError: expected '' to include 'failed'\n    at Context.<anonymous> (test/rpc/eth_estimateGas.test.js:634:34)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                        "diff": null
                      },
                      "uuid": "dfcb86d3-3674-46d4-9768-f18f9af51669",
                      "parentUUID": "71da444c-fa88-4d1f-8403-6c40d93f5c12",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "data is method that not exist on contract(contract have payable fallback)",
                      "fullTitle": "eth_estimateGas from have ckb(gasPrice) from have ckb(gasPrice),to is contract,value >0 data is method that not exist on contract(contract have payable fallback)",
                      "timedOut": false,
                      "duration": 4,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "try {\n    let estimateGas = await ethers.provider.send('eth_estimateGas',\n        [{\n            from: haveCkbAddress,\n            to: contractWithFallbackMethodAddress,\n            data: notExistMethodSig,\n            value:'0x12'\n        }])\n}catch (e){\n    return\n}\nexpect('').to.be.include('failed')",
                      "err": {
                        "message": "AssertionError: expected '' to include 'failed'",
                        "estack": "AssertionError: expected '' to include 'failed'\n    at Context.<anonymous> (test/rpc/eth_estimateGas.test.js:650:34)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                        "diff": null
                      },
                      "uuid": "753914e1-0528-4060-8974-6fd1a7c56476",
                      "parentUUID": "71da444c-fa88-4d1f-8403-6c40d93f5c12",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "data is method that not exist on contract(contract have not payable fallback)",
                      "fullTitle": "eth_estimateGas from have ckb(gasPrice) from have ckb(gasPrice),to is contract,value >0 data is method that not exist on contract(contract have not payable fallback)",
                      "timedOut": false,
                      "duration": 6,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "try {\n    let estimateGas = await ethers.provider.send('eth_estimateGas',\n        [{\n            from: haveCkbAddress,\n            to: contractWithoutFallbackMethodAddress,\n            data: notExistMethodSig,\n            value:'0x12'\n        }])\n}catch (e){\n    return\n}\nexpect('').to.be.include('failed')",
                      "err": {
                        "message": "AssertionError: expected '' to include 'failed'",
                        "estack": "AssertionError: expected '' to include 'failed'\n    at Context.<anonymous> (test/rpc/eth_estimateGas.test.js:666:34)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)",
                        "diff": null
                      },
                      "uuid": "5e7c637e-9124-4733-b1c7-3212c10c1e94",
                      "parentUUID": "71da444c-fa88-4d1f-8403-6c40d93f5c12",
                      "isHook": false,
                      "skipped": false
                    },
                    {
                      "title": "data is null (contract have  payable fallback)",
                      "fullTitle": "eth_estimateGas from have ckb(gasPrice) from have ckb(gasPrice),to is contract,value >0 data is null (contract have  payable fallback)",
                      "timedOut": false,
                      "duration": 6,
                      "state": "failed",
                      "speed": null,
                      "pass": false,
                      "fail": true,
                      "pending": false,
                      "context": null,
                      "code": "let estimateGas = await ethers.provider.send('eth_estimateGas',\n    [{\n        from: haveCkbAddress,\n        to: contractWithFallbackMethodAddress,\n        data: null,\n        value:'0x12'\n    }])",
                      "err": {
                        "message": "ProviderError: invalid type: null, expected Expect a hex string at line 1 column 114",
                        "estack": "ProviderError: invalid type: null, expected Expect a hex string at line 1 column 114\n    at HttpProvider.request (node_modules/hardhat/src/internal/core/providers/http.ts:78:19)\n    at HDWalletProvider.request (node_modules/hardhat/src/internal/core/providers/accounts.ts:189:4)\n    at EthersProviderWrapper.send (node_modules/@nomiclabs/hardhat-ethers/src/internal/ethers-provider-wrapper.ts:13:20)\n    at Context.<anonymous> (test/rpc/eth_estimateGas.test.js:671:35)",
                        "diff": null
                      },
                      "uuid": "3158a64d-d7b3-4f7c-96f2-cdd9332b27b9",
                      "parentUUID": "71da444c-fa88-4d1f-8403-6c40d93f5c12",
                      "isHook": false,
                      "skipped": false
                    }
                  ],
                  "suites": [],
                  "passes": [
                    "a2363e8a-59d5-4fc6-abab-3830f787f99c"
                  ],
                  "failures": [
                    "dfcb86d3-3674-46d4-9768-f18f9af51669",
                    "753914e1-0528-4060-8974-6fd1a7c56476",
                    "5e7c637e-9124-4733-b1c7-3212c10c1e94",
                    "3158a64d-d7b3-4f7c-96f2-cdd9332b27b9"
                  ],
                  "pending": [],
                  "skipped": [],
                  "duration": 28,
                  "root": false,
                  "rootEmpty": false,
                  "_timeout": 600000
                }
              ],
              "passes": [
                "c3a3553b-9e22-4889-b867-a508e7045edf",
                "d7d98b46-f956-4aaf-8710-93ddc7eb9ae0",
                "c7173fbf-f7e5-4f66-9bc3-3df52a1b0835",
                "193b4a75-8c1c-4f73-b10b-6fed12671337"
              ],
              "failures": [
                "726ec9b9-52c0-4ea6-89bf-04f6f90776d2"
              ],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 600000
            },
            {
              "uuid": "8a949cce-6328-42f0-940d-dcf70a3452f5",
              "title": "from have ckb(nonce)",
              "fullFile": "/Users/guopenglin/WebstormProjects/axon-test/test/rpc/eth_estimateGas.test.js",
              "file": "/test/rpc/eth_estimateGas.test.js",
              "beforeHooks": [
                {
                  "title": "\"before all\" hook in \"from have ckb(nonce)\"",
                  "fullTitle": "eth_estimateGas from have ckb(nonce) \"before all\" hook in \"from have ckb(nonce)\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": null,
                  "speed": null,
                  "pass": false,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "haveCkbAddress = await ethers.provider.getSigner(0).getAddress()",
                  "err": {},
                  "uuid": "dfdb6e33-dea2-4bd7-97c0-f4a32e92324d",
                  "parentUUID": "8a949cce-6328-42f0-940d-dcf70a3452f5",
                  "isHook": true,
                  "skipped": false
                }
              ],
              "afterHooks": [],
              "tests": [
                {
                  "title": "nonce is rand str",
                  "fullTitle": "eth_estimateGas from have ckb(nonce) nonce is rand str",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "try {\n    let estimateGas = await ethers.provider.send('eth_estimateGas',\n        [{\n            from: haveCkbAddress,\n            to: normalEoaAddress,\n            data: '0x',\n            nonce:'adnaldnaldawdaw'\n        }])\n}catch (e){\n    return\n}\nexpect('').to.be.include('failed')",
                  "err": {},
                  "uuid": "e2f33853-a913-4d39-8fd1-d7927a04543d",
                  "parentUUID": "8a949cce-6328-42f0-940d-dcf70a3452f5",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "nonce is hex str",
                  "fullTitle": "eth_estimateGas from have ckb(nonce) nonce is hex str",
                  "timedOut": false,
                  "duration": 5,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "let estimateGas = await ethers.provider.send('eth_estimateGas',\n    [{\n        from: haveCkbAddress,\n        to: normalEoaAddress,\n        data: '0x',\n        nonce:'0x1234'\n    }])\nexpect(estimateGas).to.be.include('0x')",
                  "err": {},
                  "uuid": "47f3dc56-c7ea-4fa3-9bcf-25e71d3780d6",
                  "parentUUID": "8a949cce-6328-42f0-940d-dcf70a3452f5",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "e2f33853-a913-4d39-8fd1-d7927a04543d",
                "47f3dc56-c7ea-4fa3-9bcf-25e71d3780d6"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 10,
              "root": false,
              "rootEmpty": false,
              "_timeout": 600000
            }
          ],
          "passes": [
            "da44cd25-048b-4520-b590-07171b610c0c",
            "e3de28c5-8924-4288-9b1c-6f76ddcd0afd",
            "64bc38ba-835b-47ec-8076-3b3ce84f6a4a",
            "a6194fe8-6289-44b8-9035-3ae1b27a4cab",
            "f2ea0016-ead0-4e55-a14f-bf537b77f8ec"
          ],
          "failures": [
            "50c71446-0cf8-496e-910a-8a873b1f2938",
            "e9149e37-d929-4075-a3ab-38aab732f960"
          ],
          "pending": [],
          "skipped": [],
          "duration": 118,
          "root": false,
          "rootEmpty": false,
          "_timeout": 600000
        },
        {
          "uuid": "1db4b8f0-dc18-4bab-868f-87352f101ca8",
          "title": "eth_getTransactionCount",
          "fullFile": "/Users/guopenglin/WebstormProjects/axon-test/test/rpc/eth_getTransactionCount.test.js",
          "file": "/test/rpc/eth_getTransactionCount.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook",
              "fullTitle": "eth_getTransactionCount \"before all\" hook",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// transfer ckb to unSendTxAndHaveCkbAddress\nawait transferCkb(unSendTxAndHaveCkbAddress,'0x1')\n// init sendTxAndHaveCkbAddress\nsendTxAndHaveCkbAddress = await ethers.provider.getSigner(0).getAddress()\nno0xAndUpperCaseAddress = sendTxAndHaveCkbAddress.substring(2).toUpperCase()\n// init contract address\ncontractAddress = await getDeployLogContractAddress()\nlet selfContract  = await deploySelfDestructContract()\n// let selfDestructPayload =  selfContract.methods.selfDestruct.encodeABI()\nlet selfDestructPayload = \"0x9cb8a26a\"\nlet response = await invokeContract(selfContract.address,selfDestructPayload)\ndestructContractAddress = selfContract.address\nconsole.log('sendTxAndHaveCkbAddress:',sendTxAndHaveCkbAddress)\nconsole.log('contractAddress:',contractAddress)\nconsole.log('no0xAndUpperCaseAddress:',no0xAndUpperCaseAddress)\nconsole.log('destructContractAddress:',destructContractAddress)",
              "err": {},
              "uuid": "de4ff5df-1465-4c05-a54f-07c61e0d9143",
              "parentUUID": null,
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "query account that account not have 0x and upper",
              "fullTitle": "eth_getTransactionCount query account that account not have 0x and upper",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "//please check\n// hardhat => supplied to : ADDRESS\n// eth => \"invalid argument 0: json: cannot unmarshal hex string without 0x prefix into Go value of type common.Address\"\n// axon => successful\n// must use send , if use eth_getTransactionCount will auto : no0xAndUpperCaseAddress => normal Address\nlet nonceMap = await ethers.provider.send('eth_getTransactionCount',[no0xAndUpperCaseAddress,'latest'])\nexpect(nonceMap.latestNonce).to.be.not.equal(0)",
              "err": {},
              "uuid": "915a8855-520e-48e2-8699-d397c4f7c88c",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "query account that not  send tx and not have ckb ",
              "fullTitle": "eth_getTransactionCount query account that not  send tx and not have ckb ",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let nonceMap = await eth_getTransactionCount(unSendTxAddress)\nexpect(nonceMap.earliestNonce).to.be.equal(0)\nexpect(nonceMap.pendingNonce).to.be.equal(0)\nexpect(nonceMap.latestNonce).to.be.equal(0)",
              "err": {},
              "uuid": "35feb933-5ed7-45c9-b68a-628cd98d7a9c",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "query account that not send tx but have ckb ",
              "fullTitle": "eth_getTransactionCount query account that not send tx but have ckb ",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// check address ckb > 0\nlet balanceMap = await eth_getBalance(unSendTxAndHaveCkbAddress)\nexpect(balanceMap.latestBalance).to.be.not.equal(0)\n// get nonce\nlet nonceMap = await eth_getTransactionCount(unSendTxAndHaveCkbAddress)\nexpect(nonceMap.earliestNonce).to.be.equal(0)\nexpect(nonceMap.pendingNonce).to.be.equal(0)\nexpect(nonceMap.latestNonce).to.be.equal(0)",
              "err": {},
              "uuid": "03066b98-ccdb-439a-b97f-6f939b3d5265",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "query account that have ckb and send tx past ",
              "fullTitle": "eth_getTransactionCount query account that have ckb and send tx past ",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let nonceMap = await eth_getTransactionCount(sendTxAndHaveCkbAddress)\nexpect(nonceMap.earliestNonce).to.be.equal(0)\nexpect(nonceMap.pendingNonce).to.be.not.equal(0)\nexpect(nonceMap.latestNonce).to.be.not.equal(0)",
              "err": {},
              "uuid": "3a3069ab-a19b-4d70-8682-b66e8c1c35ba",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "query account that account is contractAddress",
              "fullTitle": "eth_getTransactionCount query account that account is contractAddress",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let nonceMap = await eth_getTransactionCount(contractAddress)\nexpect(nonceMap.earliestNonce).to.be.equal(0)\nexpect(nonceMap.pendingNonce).to.be.equal(0)\nexpect(nonceMap.latestNonce).to.be.equal(0)",
              "err": {},
              "uuid": "ceb6db02-f489-4969-a2da-cbbb3f46df87",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            },
            {
              "title": "query account that account is destruct contractAddress",
              "fullTitle": "eth_getTransactionCount query account that account is destruct contractAddress",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let nonceMap = await eth_getTransactionCount(destructContractAddress)\nexpect(nonceMap.earliestNonce).to.be.equal(0)\nexpect(nonceMap.pendingNonce).to.be.equal(0)\nexpect(nonceMap.latestNonce).to.be.equal(0)",
              "err": {},
              "uuid": "ab869663-81d2-4da2-ac2a-5cde8de4772c",
              "parentUUID": null,
              "isHook": false,
              "skipped": true
            }
          ],
          "suites": [],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [
            "915a8855-520e-48e2-8699-d397c4f7c88c",
            "35feb933-5ed7-45c9-b68a-628cd98d7a9c",
            "03066b98-ccdb-439a-b97f-6f939b3d5265",
            "3a3069ab-a19b-4d70-8682-b66e8c1c35ba",
            "ceb6db02-f489-4969-a2da-cbbb3f46df87",
            "ab869663-81d2-4da2-ac2a-5cde8de4772c"
          ],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 600000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 40000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.2.2"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}